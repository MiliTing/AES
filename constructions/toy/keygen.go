package toy

import (
	"github.com/OpenWhiteBox/primitives/encoding"
	"github.com/OpenWhiteBox/primitives/matrix"
	"github.com/OpenWhiteBox/primitives/random"

	"github.com/OpenWhiteBox/AES/constructions/common"
	"github.com/OpenWhiteBox/AES/constructions/saes"
)

// generateAffineMasks creates the random external masks, according to opts. name and seed go into the random source.
func generateAffineMasks(name string, seed []byte, opts common.KeyGenerationOpts) (inputMask, outputMask encoding.BlockAffine) {
	rs := random.NewSource(name, seed)

	var inputLinear, outputLinear matrix.Matrix
	common.GenerateMasks(&rs, opts, &inputLinear, &outputLinear)

	reader := rs.Stream(make([]byte, 16))

	var inputConstant, outputConstant [16]byte
	reader.Read(inputConstant[:])
	reader.Read(outputConstant[:])

	inputMask = encoding.NewBlockAffine(inputLinear, inputConstant)
	outputMask = encoding.NewBlockAffine(outputLinear, outputConstant)

	return
}

// GenerateKeys creates a white-boxed version of the AES key `key`, with any non-determinism generated by `seed`.  The
// `opts` specifies what type of input and output masks we put on the construction and should be either
// IndependentMasks, SameMasks, or MatchingMasks.
func GenerateKeys(key, seed []byte, opts common.KeyGenerationOpts) (out Construction, inputMask, outputMask encoding.BlockAffine) {
	inputMask, outputMask = generateAffineMasks("Toy Construction", seed, opts)

	constr := saes.Construction{key}
	roundKeys := constr.StretchedKey()
	consts := [11][16]byte{}

	encoding.XOR(consts[0][:], roundKeys[0], inputMask.BlockAdditive[:])
	out[0] = encoding.NewBlockAffine(inputMask.BlockLinear.Forwards, consts[0])

	for i := 1; i < 10; i++ {
		encoding.XOR(consts[i][:], roundKeys[i], subBytesConst)
		out[i] = encoding.NewBlockAffine(round, consts[i])
	}

	finalKey := outputMask.BlockLinear.Forwards.Mul(subBytesConst.Add(roundKeys[10]))
	encoding.XOR(consts[10][:], finalKey, outputMask.BlockAdditive[:])
	out[10] = encoding.NewBlockAffine(outputMask.BlockLinear.Forwards.Compose(lastRound), consts[10])

	return
}
